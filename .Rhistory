library(tidyverse)
library(ggplot2)
x = seq(0,20,by=2)
y=pnorm(x,mean=10,sd=sqrt(360))
plot(x,y)
x = seq(0,20,by=0.5)
y=pnorm(x,mean=10,sd=sqrt(360))
plot(x,y)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y)
x = seq(0,20,by=1)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y)
stderr=sqrt(360/10)
plot(x,y,type="l",col="red")
lines(x,dnorm(x,mean=10,sd=6),col="blue")
x = seq(0,2,by=0.1)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(-5,5,by=0.1)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(-10,10,by=0.1)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
plot(x,y,type="l",col="red",ylim=5)
plot(x,y,type="l",col="red",ylim=c(0,5))
plot(x,y,type="l",col="red",ylim=c(0,1))
plot(x,y,type="l",col="red",ylim=c(-2,1))
x = seq(0,20,by=0.5)
y=pnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(1,100,by=1)
y=pnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(0,20,by=0.5)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
stderr=sqrt(360/10)
lines(x,dnorm(x,mean=10,sd=6),col="blue")
lines(x,dnorm(x,mean=10,sd=6),col="blue",ylim=c(0,50))
plot(x,y,type="l",col="red")
lines(x,dnorm(x,mean=10,sd=6),col="blue",ylim=c(0,50))
lines(x,dnorm(x,mean=10,sd=stderr),col="blue",ylim=c(0,50))
lines(x,dnorm(x,mean=10,sd=30),col="blue",ylim=c(0,50))
lines(x,dnorm(x,mean=10,sd=18),col="blue",ylim=c(0,50))
x = seq(-10,10,by=0.2)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(0,20,by=0.2)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
lines(x,dnorm(x,mean=10,sd=stderr),col="blue")
plot(x,y,type="l",col="red",ylim=c(0,10))
plot(x,y,type="l",col="red",ylim=c(0,1))
lines(x,dnorm(x,mean=10,sd=stderr),col="blue")
x = seq(-20,20,by=0.2)
plot(x,y,type="l",col="red",ylim=c(0,1))
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red",ylim=c(0,1))
plot(x,y,type="l",col="red")
x = seq(-20,20,by=0.2)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
x = seq(0,20,by=0.2)
y=dnorm(x,mean=10,sd=sqrt(360))
plot(x,y,type="l",col="red")
plot(x,y,type="l",col="red",ylim=c(0,1))
plot(x,y,type="l",col="red")
lines(x,dnorm(x,mean=10,sd=stderr),col="blue")
y=dnorm(x,mean=10,sd=stderr)
plot(x,y,type="l",col="blue")
mean=10
sd=sqrt(360)
Mean <- 10
Sd <- sqrt(360)
# X grid for non-standard normal distribution
x <- seq(-3, 3, length = 100) * Sd + Mean
# Density function
f <- dnorm(x, Mean, Sd)
plot(x, f, type = "l", lwd = 2, col = "blue", ylab = "", xlab = "Weight")
abline(v = Mean) # Vertical line on the mean
lines(x,dnorm(x,mean=10,sd=6),col="red")
Mean <- 10
Sd <- sqrt(360)
# X grid for non-standard normal distribution
x <- seq(-3, 3, length = 100) * Sd + Mean
# Density function
f <- dnorm(x, Mean, Sd)
plot(x, f, type = "l", lwd = 2, col = "blue",ylim=c(0,0.4))
abline(v = Mean) # Vertical line on the mean
Mean <- 10
Sd <- sqrt(360)
# X grid for non-standard normal distribution
x <- seq(-3, 3, length = 100) * Sd + Mean
# Density function
f <- dnorm(x, Mean, Sd)
plot(x, f, type = "l", lwd = 2, col = "blue",ylim=c(0,0.1))
abline(v = Mean) # Vertical line on the mean
lines(x,dnorm(x,mean=10,sd=stderr),col="red")
polygon(pnorm(2),pnorm(-2), col = rgb(0, 0, 1, alpha = 0.5))
Mean <- 10
Sd <- sqrt(360)
x <- seq(-3, 3, length = 100) * Sd + Mean
# Density function
f <- dnorm(x, Mean, Sd)
plot(x, f, type = "l", lwd = 2, col = "blue",ylim=c(0,0.1))
abline(v = Mean) # Vertical line on the mean
mean<-14
sd<-8
x<-seq(-2,-2,length=50)*sd+mean
x <- seq(-3, 3, length = 100) * Sd + Mean
x <- seq(-3, 3, length = 100) * sd + mean
y<-dnorm(x,mean,sd)
plot(x,y,type="l")
x <- seq(-1, 1, length = 10) * sd + mean
y<-dnorm(x,mean,sd)
plot(x,y,type="l")
x <- seq(-1, 1, by=0.1)
y<-dnorm(x,mean,sd)
plot(x,y,type="l")
x <- seq(-1, 1, by=0.1)
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
x <- seq(-15, 15, by=0.1)
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
par("mar")
par(mar=c(1,1,1,1))
plot(x,y,type="l")
x <- seq(-2, 2, by=0.1)
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
x <- seq(-1, 1, length = 10) * sd + mean
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
x <- seq(-3,3 , length = 10) * sd + mean
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
x <- seq(-3,3 , length = 50) * sd + mean
y<-dnorm(x,mean=14,sd=8)
plot(x,y,type="l")
z=19-14/(8/sqrt(20))
pnorm(z)
pvalue = 2*pnorm(-abs(z))
pvalue = 2*pnorm(abs(z))
z=((19-14)/(8/sqrt(20)))
pvalue = 2*pnorm(abs(z))
pvalue=pnorm(abs(z))
z
pvalue
library(e1071)
# Your code here.
km<-kmeans(d,centers=5,nstart=15)
library(tidyverse)
library(cluster)
library(tidyverse)
library(cluster)
# Set the random number seed:
set.seed(1)
# Your code here.
d=read_csv("data.csv",show_col_types = FALSE)
# Your code here.
km<-kmeans(d,centers=5,nstart=15)
km
# Your code here
library(e1071)
cmeans(d,5)
# Your code here
library(e1071)
cmeans(d,5)
cmeans$centers
# Your code here
library(e1071)
cmeans(d,5)
cmeans[size]
cmeans['size']
cmeans.size
# Your code here
library(e1071)
x<-cmeans(d,5)
x.size
x['size']
# Your code here
library(e1071)
x<-cmeans(d,5)
x['size']
# Your code here
library(e1071)
x<-cmeans(d,5)
x
x['size']
x['centers']
# Your code here
library(e1071)
x<-cmeans(d,5)
x
x['size']
x['centers']
# Your code here
library(e1071)
x<-cmeans(d,5)
x['size']
x['centers']
library(tidyverse)
library(cluster)
set.seed(1)
data=read_csv("data.csv",show_col_types = FALSE)
data=read_csv("data.csv")
res<-kmeans(d,centers=5,nstart=15)
res<-kmeans(data,scenters=5,nstart=20)
res<-kmeans(data,centers=5,nstart=20)
res
res$size
res$centers
# Your code here
wcs<-(res$withinss)
wcs
# Your code here
wcs<-(res$withinss)
wcs
max(wcs)
# Your code here
library(e1071)
cmeans(d,5)['centers']
# Your code here
library(e1071)
cmeans(data,5)['centers']
library(dpylr)
library(dplyr)
# Your code here
library(dplyr)
hcclust(dist(read.csv("data.csv"),method="Euclidean"))
# Your code here
library(dplyr)
hclust(dist(read.csv("data.csv"),method="Euclidean"))
# Your code here
library(dplyr)
csv=read.csv("data.csv")
d<-dist(csv,method="euclidean")
hclust(d,method = "complete")
# Your code here
library(dplyr)
csv=read.csv("data.csv")
d<-dist(csv,method="euclidean")
h<-hclust(d,method = "complete")
h
clu<-cutree(h,k=5)
clu
clu<-cutree(h,k=5)
table(clu)
library(tidyverse)
library(cluster)
# Set the random number seed:
set.seed(1)
# Your code here.
csv=read_csv("data.csv",show_col_types = FALSE)
# Your code here.
kmean<-kmeans(csv,centers=5)
kmean
# You code here.
kmean$size
# Your code here.
kmean$centers
# Your code here
wcsos<-(kmean$withinss)
wcsos
max(wcsos)
csv %>%
mutate(cluster = clu) %>%
head
# Your code here
library(dplyr)
csv=read.csv("data.csv")
d<-dist(csv,method="euclidean")
h<-hclust(d,method = "complete")
# Your code here
library(dplyr)
d<-dist(csv,method="euclidean")
h<-hclust(d,method = "complete")
# Your code here
d<-dist(csv,method="euclidean")
h<-hclust(d,method = "complete")
library(tidyverse)
library(cluster)
# Set the random number seed:
set.seed(1)
# Your code here.
csv=read_csv("data.csv",show_col_types = FALSE)
# Your code here.
kmean<-kmeans(csv,centers=5)
kmean
# You code here.
kmean$size
# Your code here
library(dplyr)
d<-dist(csv,method="euclidean")
h<-hclust(d,method = "complete")
h
getwd()
setwd(""C:/Users/mahes/Downloads")
setwd("C:/Users/mahes/Downloads")
setwd("C:/Users/mahes/Downloads/Diabetes")
dataset=read.csv("diabetes.csv")
train_data[, 1:6] = scale(training_set[, 1:6])
#Load the dataset
dataset=read.csv("diabetes.csv")
dataset$Pregnancies = ifelse(is.na(dataset$Pregnancies), ave(dataset$Pregnancies, FUN = function(x) mean(x, na.rm = TRUE )), dataset$Pregnancies)
dataset$Glucose = ifelse(is.na(dataset$Glucose), ave(dataset$Glucose, FUN = function(x) mean(x, na.rm = TRUE )), dataset$Glucose)
dataset$BloodPressure = ifelse(is.na(dataset$BloodPressure), ave(dataset$BloodPressure, FUN = function(x) mean(x, na.rm = TRUE )), dataset$BloodPressure)
dataset$SkinThickness = ifelse(is.na(dataset$SkinThickness), ave(dataset$SkinThickness, FUN = function(x) mean(x, na.rm = TRUE )), dataset$SkinThickness)
dataset$Insulin = ifelse(is.na(dataset$Insulin), ave(dataset$Insulin, FUN = function(x) mean(x, na.rm = TRUE )), dataset$Insulin)
dataset$BMI = ifelse(is.na(dataset$BMI), ave(dataset$BMI, FUN = function(x) mean(x, na.rm = TRUE )), dataset$BMI)
dataset$Diabetes = ifelse(is.na(dataset$Diabetes), ave(dataset$Diabetes, FUN = function(x) mean(x, na.rm = TRUE )), dataset$Diabetes)
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE )), dataset$Age)
dataset$Outcome = ifelse(is.na(dataset$Outcome), 0, dataset$Outcome)
library(caTools)
set.seed(1)
split=sample.split(dataset$Outcome,SplitRatio = 0.8)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
(train_data[0:5])
dim(train_data)
dim(test_data)
train_data[, 1:6] = scale(training_set[, 1:6])
train_data[, 1:6] = scale(train_data[, 1:6])
test_data[, 1:6] = scale(test_data[, 1:6])
train_data[:5]
train_data[1:5]
train_data[1:5,]
(train_data[0:5,])
library(caTools)
set.seed(1)
split=sample.split(dataset$Outcome,SplitRatio = 0.8)
train_data=subset(dataset,split==TRUE)
test_data=subset(dataset,split==FALSE)
(train_data[0:5,])
dim(train_data)
dim(test_data)
train_data[, 1:6] = scale(train_data[, 1:6])
test_data[, 1:6] = scale(test_data[, 1:6])
train_data[1:5,]
train_data[, 1:6,7] = scale(train_data[, 1:6])
test_data[, 1:6] = scale(test_data[, 1:6])
train_data[, 1:6] = scale(train_data[, 1:6])
train_data[, 7] = scale(train_data[, 7])
test_data[, 1:6] = scale(test_data[, 1:6])
test_data[, 7] = scale(test_data[, 7])
train_data[1:5,]
train_data[, 1:6] = scale(train_data[, 1:6])
train_data[, 8] = scale(train_data[, 8])
test_data[, 1:6] = scale(test_data[, 1:6])
test_data[, 8] = scale(test_data[, 8])
train_data[1:5,]
